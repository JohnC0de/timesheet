generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  Attendance    Attendance[]
  Role          Role         @relation(fields: [roleName], references: [name])
  roleName      String       @default("EMPLOYEE")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

// Necessary for time and attendance system
model Company {
  id         String       @id @default(cuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Attendance Attendance[]
}

model Project {
  id         String       @id @default(cuid())
  name       String
  categories Category[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Attendance Attendance[]
}

model Category {
  id         String       @id @default(cuid())
  name       String
  project    Project      @relation(fields: [projectId], references: [id])
  projectId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Attendance Attendance[]
}

model Attendance {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  date       DateTime
  clockIn    String
  clockOut   String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
